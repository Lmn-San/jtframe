#!/bin/bash

function show_usage() {
    cat << EOF
JTCORE compilation tool. (c) Jose Tejada 2019, @topapate
    First argument is the project name, like gng, or 1943

    -skip       skips compilation and goes directly to prepare the release file
                using the RBF file available.
    -d          Defines a verilog macro. Macros are removed from qsf file after
                compilation.
                Useful macros:
                    NOSOUND             the core is compiled without sound (faster)
                    MISTER_VIDEO_MIXER  uses the Mr video modules
                    JTFRAME_SCAN2X      uses simple scan doubler from JTFRAME
    -git        adds the release file to git
    -mister     compiles MiSTer version. Default is MiST.
    -prog       programs the FPGA
    -prog-only  skips compilations and directly programs the FPGA
    -zip | -z   Create zip file
    -add        all arguments from that point on will be used as inputs to the
                zip file. All files must be referred to $JTROOT path
    -sim        prepare quartus simulation
    -help       displays this message
EOF
   exit 0
}

# Is the root folder environment variable set

if [ "$JTROOT" = "" ]; then
    echo "ERROR: Missing JTROOT environment variable. Define it to"
    echo "point to the root folder of the project to compile."
    exit 1
fi

cd $JTROOT
MODULES=$JTROOT/modules
JTFRAME=$MODULES/jtframe

if [ ! -e "$JTFRAME" ]; then
    echo "ERROR: cannot locate jtframe folder."
    echo "       It should be at $JTFRAME"
    exit 1
fi

# Is the project defined?
PRJ=$1

case "$PRJ" in
    "")
        echo "ERROR: Missing project name."
        show_usage
        exit 1;;
    -help | -h | --help)
        show_usage;;
esac

if [ -e $JTROOT/cores/$PRJ ]; then
    PRJPATH=$JTROOT/cores/$PRJ
elif [ -e $JTROOT/$PRJ ]; then
    PRJPATH=$JTROOT/$PRJ
elif [ -e $JTROOT/hdl ]; then
    PRJPATH=$JTROOT
else
    echo "ERROR: Cannot find a valid project path"
    exit 1
fi
shift

ZIP=FALSE
SIM=FALSE
GIT=FALSE
PROG=FALSE
MIST=mist
SKIP_COMPILE=FALSE

# Verilog macros
MACROS=

while [ $# -gt 0 ]; do
    case "$1" in
        -skip | -s) SKIP_COMPILE=TRUE;;
        -git | -g) GIT=TRUE;;
        -prog | -p) PROG=TRUE;;
        -prog-only | -w)
            PROG=TRUE
            SKIP_COMPILE=TRUE;;
        -mister | -mr)
            MIST=mister
            if ! (which quartus_sh|grep 17 -q); then
                PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:.
                PATH=$PATH:$HOME/intelFPGA_lite/17.1/quartus/bin
                export PATH
            fi;;
        -mist)
            MIST=mist
            PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:.
            PATH=$PATH:$HOME/altera/13.1/quartus/bin
            export PATH;;
        -add)
            ZIP=TRUE
            shift
            break;;
        -sim)
            SIM=TRUE;;
        -gngvga)
            MACROS="JTFRAME_VGA SCAN2X_TYPE=1 $MACROS";;
        -d)
            shift
            MACROS="$1 $MACROS"
            ;;
        -zip | -z)
            ZIP=TRUE;;
        -help | -h)
            show_usage;;
        *)  echo "ERROR: Unknown option $1";
            exit 1;;
    esac
    shift
done

function escape_bars {
    echo ${1//\//\\/}
}

# qsf line to disable SOUND synthesis
# set_global_assignment -name VERILOG_MACRO "NOSOUND=<None>"
function copy_templates {
    datestr=$(date "+%H:%M:%S %B %e, %Y")
    # Replace core name and path to modules
    sedstr='s/${CORENAME}/'${PRJ}'/g;s/${DATE}/'${datestr}'/g;s/${MODULES}/'$(escape_bars ${MODULES})'/g;s/${PRJPATH}/'$(escape_bars ${PRJPATH})'/g'
    sed "$sedstr" $JTFRAME/hdl/$MIST/$MIST.qpf > $PRJPATH/$MIST/jt${PRJ}.qpf
    sed "$sedstr" $JTFRAME/hdl/$MIST/$MIST.qsf > $PRJPATH/$MIST/jt${PRJ}.qsf
    # MiST's tcl is always appended
    TCL=$PRJPATH/mist/jt${PRJ}.tcl
    if [ ! -e $TCL ]; then
        echo "WARNING: No project TCL file. Creating one empty."
        touch $TCL
    fi
    cat $PRJPATH/mist/jt${PRJ}.tcl >> $PRJPATH/$MIST/jt${PRJ}.qsf
    # MiSTer's tcl is added if it exists
    if [ $MIST = mister ]; then
        if [ -e $PRJPATH/mister/jt${PRJ}.tcl ]; then
            cat $PRJPATH/mister/jt${PRJ}.tcl >> $PRJPATH/mister/jt${PRJ}.qsf            
        fi
    fi
}

echo ==============================================
echo jt$PRJ $MIST compilation starts at $(date +%T)
if [ "$MACROS" != "" ]; then
    echo INFO: Macros used: $MACROS
else
    echo INFO: No macros.
fi

################ compilation
if [ $SKIP_COMPILE = FALSE ]; then
    # Create MiST(er) folders if they don't exist
    mkdir -p $PRJPATH/mist
    mkdir -p $PRJPATH/mister
    # Update message file
    cd bin
    jt${PRJ}_msg.py || echo "WARNING: No message file"
    # Update Avatars
    if [ -e $PRJPATH/patrons/avatars ]; then
        avatar.py $PRJ > /tmp/avatar_$PRJ.log || ( cat /tmp/avatar_$PRJ.log; exit 1 )
    fi
    cd $PRJPATH/$MIST || exit 1
    # if [ ! -e $PRJPATH/$MIST/rom_loadv.hex ]; then
    #     ln -s $JTROOT/modules/rom_loadv.hex
    # fi
    echo "Moved to folder " $(pwd)
    # Recompile
    rm -rf db incremental_db output_files
    mkdir -p $JTROOT/log/$MIST
    LOG="$JTROOT/log/$MIST/jt$PRJ.log"
    echo Log file: $LOG
    copy_templates
    # Prepare macros
    for m in $MACROS; do
        echo -e "\n" set_global_assignment -name VERILOG_MACRO \"$m\" >> jt$PRJ.qsf
    done
    if [ $SIM = FALSE ]; then
        # Compilation
        quartus_sh --flow compile jt$PRJ > "$LOG"
        if ! grep "Full Compilation was successful" "$LOG"; then
            grep -i error "$LOG" -A 2
            echo "ERROR while compiling the project. Aborting"
            exit 1
        fi
    else
        # Simulation
        echo Preparing simulation netlist. Logfile:
        echo $LOG
        quartus_map jt$PRJ --64bit --parallel=1 --efort=fast > "$LOG"
        exit $?
    fi
fi

function append_if_exists {
    val=
    while [ $# -gt 0 ]; do
        if [ -e "$1" ]; then
            val="$val $1"
        fi
        shift
    done
    echo $val
}

################# Create zip file
if [ $ZIP = TRUE ]; then
    # Rename output file
    cd $JTROOT
    mkdir -p releases
    RELEASE=jt${PRJ}_$(date +"%Y%m%d")
    if [ $MIST = mister ]; then
        RBF=$PRJPATH/${MIST}/output_files/jt$PRJ.rbf
    else
        RBF=$PRJPATH/${MIST}/jt$PRJ.rbf
    fi
    if [ ! -e $RBF ]; then
        echo "ERROR: file $RBF does not exist. You need to recompile."
        exit 1
    fi
    cp $RBF $RELEASE.rbf
    zip --update --junk-paths releases/$MIST/${RELEASE}.zip ${RELEASE}.rbf README.txt $* \
        $(append_if_exists rom/{$PRJ/build_rom.sh,$PRJ/build_rom.ini,build_rom_$PRJ.bat} doc/jt$PRJ.txt )
    if [ -e $JTROOT/../jtbin ]; then
        if [ "$MIST" = mist ]; then
            cp releases/$MIST/${RELEASE}.zip $JTROOT/../jtbin/$MIST
        else
            # MiSTer
            # Add MRA files
            if [ -e $JTROOT/rom/mra/${PRJ}.list ]; then
                IFSold=$IFS
                list_file=$JTROOT/rom/mra/${PRJ}.list
                while IFS= read -r line; do 
                    echo $line
                    zip --update --junk-paths releases/$MIST/${RELEASE}.zip \
                        "$JTROOT/rom/mra/${line}" 
                done < $list_file 
                IFS=$IFSold
            fi
            # copy to folder
            mkdir -p $JTROOT/../jtbin/mister/$PRJ/releases
            cp $RELEASE.rbf $JTROOT/../jtbin/$MIST/$PRJ/releases
            cp releases/$MIST/${RELEASE}.zip $JTROOT/../jtbin/$MIST/$PRJ
        fi
    fi
    rm $RELEASE.rbf
fi

# Add to git
if [ $GIT = TRUE ]; then
    git add -f $PRJ/${MIST}/msg.hex
    git add -f releases/$MIST/$RELEASE.zip
fi

if [ $PROG = TRUE ]; then
    if [ $MIST = mister ]; then
        CABLE="DE-SoC"
        cd $PRJPATH/mister
        FILE=jtag.cdf
    else
        CABLE="USB-Blaster(Altera)"
        FILE=$PRJPATH/${MIST}/jt$PRJ.cdf
    fi
    quartus_pgm -c "$CABLE" $FILE
fi

echo completed at $(date)