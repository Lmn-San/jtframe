#!/bin/bash
TARGET=
EXTRA="-d JTFRAME_RELEASE -g"
NETWORK=
DRYRUN=
CORELIST=".*"
MAX_JOBS=
CMD=jtcore
BAD=0

function add_core {
    if [ -d $CORES/$1 ]; then
        if [ "$CORELIST" = ".*" ]; then
            CORELIST="$1"
        else
            CORELIST="$CORELIST\|$1"
        fi
    else
        echo "Error: core $1 cannot be found in $CORES"
        BAD=1
    fi
}

while [ $# -gt 0 ]; do
    case "$1" in
        -mister|-mist|-sidi)
            TARGET="$TARGET ${1:1}"
            ;;
        -target)
            shift
            TARGET="$1"
            ;;
        -all | -a)
			TARGET="mist mister sidi";;
        -test)
            EXTRA="-d NOSOUND -d MISTER_NOHDMI";;
        -dry|--dry-run)
            DRYRUN=--dry-run;;
        -cores)
            shift
            for i in $1; do
                add_core $i
            done
            ;;
        -jobs)
            shift
            MAX_JOBS="--jobs $1"
            ;;
        -seed)
            CMD="jtseed 4"
            ;;
        -network)
            shift
            if [ ! -e "$1" ]; then
                echo "Specify the name of the hosts file to use after -network"
                exit 1
            fi
            NETWORK="--sshloginfile $1"
            ;;
        -h | -help | --help)
            cat <<EOF
Updates all JT cores. Usage:
    jtupdate    -mist -sidi ...

    -mist   updates MiST target (uses all CPU cores, paralel compilation)
    -sidi   updates MiST target (uses all CPU cores, paralel compilation)
    -mister updates MiSTer target (one JT core at a time)
    -all    updates both MiST and MiSTer
    -cores  list of cores to update as \"gng 1943\"
    -dry    dry run
    -test   test build. Disables sound and HDMI. Does not define JTFRAME_RELEASE.
    -seed   run a seed sweep if needed
    -jobs   Maximum number of jobs to run in parallel. For MiSTer 2 is recommended.
    :       options for jtcore script can be added after a colon
EOF
        exit 0;
        ;;
        :)
            # the remaining argument will be passed directly to the compilation
            shift
            EXTRA="$EXTRA $*"
            break;;
        -*) echo "ERROR: jtupdate does not know option $1";
            exit 1;;
        *)
            add_core $1;;
    esac
    shift
done

if [ -z "$TARGET" ]; then
    echo You need to specify a target platform.
    exit 1
fi

if [ $BAD = 1 ]; then
    exit 1
fi

TASKS=/tmp/$RANDOM_$RANDOM

(
    for i in $TARGET; do
        if [ -e $i.cores ]; then cat $i.cores; echo ; fi;
    done
) | grep --word-regexp "$CORELIST" > $TASKS

if [ $(cat $TASKS|wc -l) = 0 ]; then
    echo no target.cores files were found. For example mister.cores.
    echo jtupdate must be called from the folder where these files exist.
    exit 1
fi

cat $TASKS | parallel --no-run-if-empty --colsep " "  --shuf  --workdir $JTROOT \
    $DRYRUN $NETWORK $MAX_JOBS\
    --delay 0.25 $JTFRAME/bin/$CMD {} $EXTRA | tee $JTROOT/log/update.log

